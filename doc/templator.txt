*templator.txt*     Multi-file project templates using skeleton/snippets engines
                    Author: Tom Link, micathom at gmail com

The templator plugin allows the creation of filesets based on multi-file 
templates. Templates could be written in any code 
template/skeleton/snippets style. At the time of writing, templates can 
be written in:

    - template vim (see |templator-tvim|) ("tvim" extension)
    - tskeleton (vimscript #1160) ("tskel" extension)

It shoudln't be too difficult to add support for additional template 
engines.

The |:Templator| command can be used to create multi-file projects.

Example 1: Create files for the "test" template-set in the current root 
directory, which usually is the current working directory unless 
|b:templator_root_dir| is set: >

    :Templator test

Example 2: Create files for the "test" template-set in some directory (the 
directory is created if it doesn't already exist): >

    :Templator ~/src/foo/bar/test

Templates are kept in "templator" subdirectories in your 'runtimepath' (e.g. 
~/.vim/templator). A subdirectory's name consists of 
"TEMPLATE_NAME.TEMPLATE_TYPE". TEMPLATE_NAME is the name that is used for the 
|:Templator| command. TEMPLATE_TYPE is the name of the template engine used to 
expand file templates.

Templates consist of a bunch of files and an optional vim script (see 
|templator-scripts|) that is run after creating the files.


-----------------------------------------------------------------------
Tutorial~

Following the second example above, (using tskeleton for file templates) the 
root directory of the template set would be: >
    
    ~/.vim/templator/test.tskel/

The template set could, e.g., consist of the following files: >

    ~/.vim/templator/test.tskel/README.TXT
    ~/.vim/templator/test.tskel/docs/index.html
    ~/.vim/templator/test.tskel/src/main.c

and an optional vim script (see |templator-scripts|) in:
    
    ~/.vim/templator/test.vim

This vim script is run with ~/src/foo/bar/ set as current working directory.

The above command call >

    :Templator ~/src/foo/bar/test

would the result in the creation of the following files: >

    ~/src/foo/bar/README.TXT
    ~/src/foo/bar/docs/index.html
    ~/src/foo/bar/docs/main.c


-----------------------------------------------------------------------
                                                    *templator-scripts*
Template scripts~

Every template set may be accompanied by a vim script in the parent directory. 
E.g. the script file for the template set "~/.vim/templator/test.tskel/" is 
"~/.vim/templator/test.vim".

The template script for template NAME can set the following 
|dictionary-function|s (self is set to g:templator#drivers[NAME]):

    g:templator#drivers.{NAME}.Before(args) dict
        Called before processing the template set.

    g:templator#drivers.{NAME}.Buffer(args) dict
        Called on each newly created file.

    g:templator#drivers.{NAME}.After(args) dict
        Called after processing the template set.


-----------------------------------------------------------------------
                                                    *templator-placeholders*
Placeholders in filenames~

The basename of template files may contain place holders. The values for these 
placeholders can be set when calling the |:Templator| command.

The argument may contain named or numbered arguments. E.g.

    :Templator test foo class=Test bar

Will create files based on the template set called "test" with the following 
argument list:

    1 ....... foo
    2 ....... bar
    class ... Test

Placeholders in filenames can be defined as follows:

    ${1} .............. 1 can be any numeric value that references the nth 
                        (unnamed) value of the argument list
    ${NAME} ........... Replace with the argument NAME
    ${NAME=DEFAULT} ... Replace with the argument NAME but use the DEFAULT 
                        value if it isn't set

Example: With the above argument list the template filename "docs/${class}.txt" 
will be expanded to the filename "~/src/foo/bar/docs/Test.txt".


-----------------------------------------------------------------------
Install~

In order to install the vba, open the vba file in VIM and type: >

    :so %

See :help vimball for details.

Also available via git: http://github.com/tomtom/templator_vim/


Optional:

In order to use tskeleton-style template sets, tskeleton (vimscript #1160) must 
be installed: http://www.vim.org/scripts/script.php?script_id=1160


========================================================================
Contents~

        :Templator .............................. |:Templator|
        g:templator#verbose ..................... |g:templator#verbose|
        g:templator#edit ........................ |g:templator#edit|
        g:templator#sep ......................... |g:templator#sep|
        templator#Setup ......................... |templator#Setup()|
        g:templator#expander#tvim#enable ........ |g:templator#expander#tvim#enable|
        templator#expander#tvim#Init ............ |templator#expander#tvim#Init()|
        templator#expander#tvim#Expand .......... |templator#expander#tvim#Expand()|
        templator#expander#tskel#Init ........... |templator#expander#tskel#Init()|
        templator#expander#tskel#Expand ......... |templator#expander#tskel#Expand()|


========================================================================
plugin/templator.vim~

                                                    *:Templator*
:Templator [DIRNAME/]NAME [ARG1 ARG2 ...]
    NAME is the basename (with the extension removed) of a multi-files 
    project template.

    The list of optional arguments is used to expand place holders in 
    filenames (see |templator-placeholders|).

    See |templator#Setup()| for details.


========================================================================
autoload/templator.vim~

                                                    *g:templator#verbose*
g:templator#verbose            (default: 1)
    If true, show some warnings (e.g. when opening an already existing 
    file that wasn't created by templator).

                                                    *g:templator#edit*
g:templator#edit               (default: 'hide edit')
    The command used for opening files.

                                                    *g:templator#sep*
g:templator#sep                (default: exists('+shellslash') && !&shellslash ? '\' : '/')

                                                    *templator#Setup()*
templator#Setup(name, ...)
    The name argument may contain directory information. E.g. 
    "foo/bar/test" will create file from the template set "test" in the 
    directory "foo/bar", which will be created if necessary.

                                                        *b:templator_root_dir*
    If the name argument begins with "*", the filename is relative to the 
    project's root directory. Templator uses the following methods to find 
    the project's root directory:

      1. If the variable b:templator_root_dir exists, use its value.
      2. If tlib (vimscript #1863) is available, check if the current 
         buffer is under the control of a supported VCS and use that 
         directory.

    Example:
    If b:templator_root_dir is /home/foo/bar and the current buffer is 
    /home/foo/bar/src/lib/test.c, then *boo/far will create files from the 
    "far" template set in /home/foo/bar/boo.

    Additional arguments can be passed as a mix of numbered and named 
    arguments. E.g. "foo name=bar boo" will be parsed as:

        1    = foo
        name = bar
        2    = boo

    Those arguments can be used from placeholders (see 
    |templator-placeholders|).


========================================================================
autoload/templator/expander/tvim.vim~


                                                  *templator-tvim*
Template vim~

tvim is a minimal php-style template engine. The following 
place-holders are supported:

  <?vim ... ?> ... Replace the placeholder with the output (see 
                   |:echo|) of the enclosed vim code.
  <?vimcursor?> .. Set the cursor at this position after expanding any 
                   placeholder.

                                                    *g:templator#expander#tvim#enable*
g:templator#expander#tvim#enable (default: 1)
    It true, enable templates in template-vim.

    Code embedded in templates is executed via |:@|. It is not run in 
    the sandbox.

                                                    *templator#expander#tvim#Init()*
templator#expander#tvim#Init()

                                                    *templator#expander#tvim#Expand()*
templator#expander#tvim#Expand()


========================================================================
autoload/templator/expander/tskel.vim~

                                                    *templator#expander#tskel#Init()*
templator#expander#tskel#Init()

                                                    *templator#expander#tskel#Expand()*
templator#expander#tskel#Expand()



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
