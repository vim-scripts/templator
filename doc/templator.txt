*templator.txt*     Multi-file project templates using skeleton/snippets engines
                    Author: Tom Link, micathom at gmail com

In many programming languages/environments, you usually work with a set of files 
that belong together. E.g. if you create a c file, you usually also want to 
create a h header file. If you create a viewer file, you usually also want to 
create corresponding model and controller files. If you want to create a 
library file, you usually also want to create some test file etc. This is were 
templator comes in.

The templator plugin allows the creation of filesets based on multi-file 
templates. Templates could be written in any code 
template/skeleton/snippets style. At the time of writing, templates can 
be written in:

    - template vim (see |templator-tvim|) ("tvim" extension)
    - tskeleton (vimscript #1160) ("tskel" extension)

It shouldn't be too difficult to add support for additional template 
engines.

The |:Templator| command can be used to create multi-file projects.

Example 1: Create files for the "vimplugin" template-set in the current root 
directory, which usually is the current working directory unless 
|b:templator_root_dir| is set (see |templator-arguments| for details): >

    :Templator vimplugin myplugin

"myplugin" is the plugin's name. The argument is required by the 
template set used in this example. It is also possible to use named 
arguments.

Example 2: Create files for the "vimplugin" template-set in some directory (the 
directory is created if it doesn't already exist): >

    :Templator ~/src/foo/bar/vimplugin myplugin

Templates are kept in "templator" subdirectories in your 'runtimepath' (e.g. 
~/.vim/templator). A subdirectory's name consists of 
"TEMPLATE_NAME.TEMPLATE_TYPE". TEMPLATE_NAME is the name that is used for the 
|:Templator| command. TEMPLATE_TYPE is the name of the template engine used to 
expand file templates.

Templates consist of a bunch of files and an optional vim script (see 
|templator-scripts|) that is run after creating the files.


-----------------------------------------------------------------------
Tutorial~

Following the second example above, (using tskeleton for file templates) the 
root directory of the template set would be: >
    
    ~/.vim/templator/vimplugin.tvim/

The template set could, e.g., consist of the following files: >

    ~/.vim/templator/vimplugin.tvim/README_${1}.TXT
    ~/.vim/templator/vimplugin.tvim/docs/${1}.txt
    ~/.vim/templator/vimplugin.tvim/plugin/${1}.vim
    ~/.vim/templator/vimplugin.tvim/autoload/${1}.vim

and an optional vim script (see |templator-scripts|) in:
    
    ~/.vim/templator/vimplugin.vim

This vim script is run with ~/src/foo/bar/ set as current working directory.

The above command call >

    :Templator ~/src/foo/bar/vimplugin myplugin

would the result in the creation of the following files: >

    ~/src/foo/bar/README_myplugin.TXT
    ~/src/foo/bar/docs/myplugin.txt
    ~/src/foo/bar/plugin/myplugin.vim
    ~/src/foo/bar/autoload/myplugin.vim

Any placeholders within the files are expanded.


-----------------------------------------------------------------------
                                                    *templator-scripts*
Template scripts~

Every template set may be accompanied by a vim script in the parent directory. 
E.g. the script file for the template set "~/.vim/templator/test.tskel/" is 
"~/.vim/templator/test.vim".

The template script for template NAME can set the following 
|dictionary-function|s (self is set to g:templator#hooks[NAME]):

    g:templator#hooks.{NAME}.CheckArgs(args) dict
        Check whether the provided command-line arguments are complete 
        and fit the requirements of the template set. Return true (i.e. 
        non-zero) if the arguments are valid; otherwise return false 
        (i.e. 0). If the function returns false, an exception is 
        |:throw|n. Since "args" is a mutable dictionary, the function 
        can modify the args argument.

    g:templator#hooks.{NAME}.Before(args) dict
        Called before processing the template set.

    g:templator#hooks.{NAME}.IncludeFilename(args) dict => boolean
        Return false if the current file should not be created. Return true 
        otherwise. If the hook isn't defined, the value defaults to true.
        args['__FILE__'] contains the name of the template file.
        args['__FILENAME__'] contains the name of the filename that would be 
        created on disk.

    g:templator#hooks.{NAME}.Buffer(args) dict
        Called on each newly created file.

    g:templator#hooks.{NAME}.After(args) dict
        Called after processing the template set.


-----------------------------------------------------------------------
                                                    *templator-arguments*
Arguments for the |:Templator| command~

The first "name" argument to the |:Templator| command defines:

    1. where to put newly created files
    2. based on which template set.

The "name" argument consists of one to three parts: [*][DIR]NAME

    * ...... Optional: Create the files relative to a project root directory 
             (see |b:templator_root_dir|). Templator uses the following methods 
             to find the project's root directory:
                                                    *b:templator_root_dir*
                  1. If the variable b:templator_root_dir exists, use its 
                     value.
                  2. If tlib (vimscript #1863) is available, check if the 
                     current buffer is under the control of a supported VCS and 
                     use that directory.

    DIR .... Optional: A relative or absolute directory name. The directory 
             will be created if it doesn't exist. E.g. "foo/bar/test" will 
             create file from the template set "test" in the directory 
             "foo/bar", which will be created if necessary.

    NAME ... The name of the template set to be used. The NAME of the template 
             set "foo.tskel" is "foo".

Example:
If b:templator_root_dir is /home/foo/bar and the current buffer is 
/home/foo/bar/src/lib/test.c, then *boo/far will create files from the 
"far" template set in /home/foo/bar/boo.

Additional arguments can be passed as a mix of numbered and named 
arguments. E.g. "foo name=bar boo" will be parsed as:

    1    = foo
    name = bar
    2    = boo

Those arguments can be used from placeholders (see 
|templator-placeholders|).


-----------------------------------------------------------------------
                                                    *templator-placeholders*
Placeholders in filenames~

The basename of template files may contain place holders. The values for these 
placeholders can be set when calling the |:Templator| command.

The argument may contain named or numbered arguments. E.g.

    :Templator test foo class=Test bar

Will create files based on the template set called "test" with the following 
argument list:

    1 ....... foo
    2 ....... bar
    class ... Test

Placeholders in filenames can be defined as follows:

    ${1} .............. 1 can be any numeric value that references the nth 
                        (unnamed) value of the argument list
    ${NAME} ........... Replace with the argument NAME
    ${NAME=DEFAULT} ... Replace with the argument NAME but use the DEFAULT 
                        value if it isn't set

Example: With the above argument list the template filename "docs/${class}.txt" 
will be expanded to the filename "~/src/foo/bar/docs/Test.txt".


-----------------------------------------------------------------------
Install~

In order to install the vba, open the vba file in VIM and type: >

    :so %

See :help vimball for details.

Also available via git: http://github.com/tomtom/templator_vim/


Optional enhancements:

In order to use tskeleton-style template sets, tskeleton (vimscript #1160) must 
be installed: http://www.vim.org/scripts/script.php?script_id=1160

For projects under VCS control, if you want support for filenames relative to 
the project's root, tlib (vimscript #1863) must be installed: 
http://www.vim.org/scripts/script.php?script_id=1863


========================================================================
Contents~

        :Templator .............................. |:Templator|
        g:templator#verbose ..................... |g:templator#verbose|
        g:templator#edit_new .................... |g:templator#edit_new|
        g:templator#edit_again .................. |g:templator#edit_again|
        g:templator#sep ......................... |g:templator#sep|
        templator#Setup ......................... |templator#Setup()|
        g:templator#expander#tvim#enable ........ |g:templator#expander#tvim#enable|
        templator#expander#tvim#Init ............ |templator#expander#tvim#Init()|
        templator#expander#tvim#Expand .......... |templator#expander#tvim#Expand()|
        templator#expander#tskel#Init ........... |templator#expander#tskel#Init()|
        templator#expander#tskel#Expand ......... |templator#expander#tskel#Expand()|


========================================================================
plugin/templator.vim~

                                                    *:Templator*
:Templator [DIRNAME/]NAME [ARG1 ARG2 ...]
    NAME is the basename (with the extension removed) of a multi-files 
    project template. See |templator-arguments| for details.

    The list of optional arguments is used to expand place holders in 
    filenames (see |templator-placeholders|).

    See |templator#Setup()| for details.


========================================================================
autoload/templator.vim~

                                                    *g:templator#verbose*
g:templator#verbose            (default: 1)
    If true, show some warnings (e.g. when opening an already existing 
    file that wasn't created by templator).

                                                    *g:templator#edit_new*
g:templator#edit_new           (default: 'hide edit')
    The command used for editing newly created files.

                                                    *g:templator#edit_again*
g:templator#edit_again         (default: g:templator#edit_new)
    The command used for editing files that already existed.
    If empty, don't open already existing files.

                                                    *g:templator#sep*
g:templator#sep                (default: exists('+shellslash') && !&shellslash ? '\' : '/')

                                                    *templator#Setup()*
templator#Setup(name, ...)
    Create files based on the template set referred to by the basename of 
    the name argument.


========================================================================
autoload/templator/expander/tvim.vim~


                                                  *templator-tvim*
Template vim~

tvim is a minimal php-style template engine. The following 
place-holders are supported:

  <?vim ... ?> ... Replace the placeholder with the output (see 
                   |:echo|) of the enclosed vim code.
  <?vimeval ... ?> ... Replace the placeholder with the value (see 
                   |eval()|) of the enclosed vim code.
  <?vimcursor?> .. Set the cursor at this position after expanding any 
                   placeholder.

                                                    *g:templator#expander#tvim#enable*
g:templator#expander#tvim#enable (default: 1)
    It true, enable templates in template-vim.

    Code embedded in templates is executed via |:@|. It is not run in 
    the sandbox.

                                                    *templator#expander#tvim#Init()*
templator#expander#tvim#Init()

                                                    *templator#expander#tvim#Expand()*
templator#expander#tvim#Expand()


========================================================================
autoload/templator/expander/tskel.vim~

                                                    *templator#expander#tskel#Init()*
templator#expander#tskel#Init()

                                                    *templator#expander#tskel#Expand()*
templator#expander#tskel#Expand()


========================================================================
templator/vimfiletype.vim~


                                                    *templator-vimfiletype*
VIM FTPlugin Template Set~

This template set serves as an example for how to use templator.

Run with:

    :Templator [*][PATH/]vimfiletype NAME [suffix=SUFFIX]

The first argument is the name of the filetype. The name is used 
in several locations in the template files.

The optional suffix argument should include any leading period (e.g. 
".foo" of "_bar.foo").

Users should define the following variables in |vimrc| before using this 
template set:

    g:templator_vimplugin_user
    g:templator_vimplugin_homepage
    g:templator_vimplugin_license


========================================================================
templator/vimplugin.vim~


                                                    *templator-vimplugin*
VIM Plugin Template Set~

This template set serves as an example for how to use templator.

Run with:

    :Templator [*][PATH/]vimplugin NAME

The first argument is the name of the plugin. The name is used 
in several locations in the template files.

Users should define the following variables in |vimrc| before using this 
template set:

    g:templator_vimplugin_user
    g:templator_vimplugin_homepage
    g:templator_vimplugin_license



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
